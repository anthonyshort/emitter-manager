// Generated by CoffeeScript 1.3.3
(function() {

  describe('Listener', function() {
    var Emitter, expect, listener;
    expect = chai.expect;
    Emitter = require('component-emitter');
    listener = require('listener');
    beforeEach(function() {
      this.emitter = new Emitter;
      return this.listener = Object.create(listener);
    });
    it('should listen to events', function() {
      var matched;
      matched = false;
      this.listener.listenTo(this.emitter, 'foo', function() {
        return matched = true;
      });
      this.emitter.emit('foo');
      return expect(matched).to.equal(true);
    });
    it('should stop listening to all events', function() {
      var bar, foo;
      foo = bar = false;
      this.listener.listenTo(this.emitter, 'foo', function() {
        return foo = true;
      });
      this.listener.listenTo(this.emitter, 'bar', function() {
        return bar = true;
      });
      this.listener.stopListening();
      this.emitter.emit('foo');
      this.emitter.emit('bar');
      expect(foo).to.equal(false);
      return expect(bar).to.equal(false);
    });
    it('should stop listening to events on an object', function() {
      var bar, foo;
      foo = bar = false;
      this.listener.listenTo(this.emitter, 'foo', function() {
        return foo = true;
      });
      this.listener.listenTo(this.emitter, 'bar', function() {
        return bar = true;
      });
      this.listener.stopListening(this.emitter);
      this.emitter.emit('foo');
      this.emitter.emit('bar');
      expect(foo).to.equal(false);
      return expect(bar).to.equal(false);
    });
    it('should stop listening to events on an object for an event', function() {
      var bar, foo;
      foo = bar = false;
      this.listener.listenTo(this.emitter, 'foo', function() {
        return foo = true;
      });
      this.listener.listenTo(this.emitter, 'bar', function() {
        return bar = true;
      });
      this.listener.stopListening(this.emitter, 'foo');
      this.emitter.emit('foo');
      this.emitter.emit('bar');
      expect(foo).to.equal(false);
      return expect(bar).to.equal(true);
    });
    return it('should stop listening with a specific callback', function() {
      var bar, baz, callback, foo;
      foo = bar = baz = false;
      callback = function() {
        return foo = true;
      };
      this.listener.listenTo(this.emitter, 'foo', callback);
      this.listener.listenTo(this.emitter, 'foo', function() {
        return baz = true;
      });
      this.listener.listenTo(this.emitter, 'bar', function() {
        return bar = true;
      });
      this.listener.stopListening(this.emitter, 'foo', callback);
      this.emitter.emit('foo');
      this.emitter.emit('bar');
      expect(foo).to.equal(false);
      expect(bar).to.equal(true);
      return expect(baz).to.equal(true);
    });
  });

}).call(this);
